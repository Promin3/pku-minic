use crate::ast::*;
// lalrpop 里的约定
grammar;

// 约束 lexer 的行为
match {
  // 跳过空白符和注释
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*([^*]|\*[^/])*\*/" => {},   
  // 剩下的情况采用默认方式处理
  _
}

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

FuncDef: FuncDef = {
  <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
    FuncDef { <> }
  }
}

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <stmt: Stmt> "}" => Block { <> };

Stmt: Stmt = "return" <exp: Exp> ";" => Stmt { <> };

Exp: Exp = <unaryexp: UnaryExp> => Exp { <> };

PrimaryExp: PrimaryExp = { 
  "(" <exp: Exp> ")" => PrimaryExp::Exp(Box::new(exp)),
  <num: Number> => PrimaryExp::Number(num),
};

UnaryExp: UnaryExp = {
  PrimaryExp => UnaryExp::Primary(<>), 
  "+" <UnaryExp> => <>, //忽略正号，原值传递
  <op: UnaryOp> <exp: UnaryExp> => UnaryExp::Unary(op, Box::new(exp)),
}

UnaryOp: UnaryOp = {
  "-" => UnaryOp::Neg,
  "!" => UnaryOp::LogiNot,
}

Number: i32 = IntConst => <>;

Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}
